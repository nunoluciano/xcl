<?php
/**
 * This Interface is generated by Cube tool.
 * @package   Legacy
 * @version   2.3.0
 * @author    Gigamaster, XCL 2020 PHP7
 * @author    code generator
 * @copyright Copyright 2005-2021 XOOPSCube Project
 * @license   https://github.com/xoopscube/xcl/blob/master/docs/GPL_V2.txt
 * @license   https://github.com/xoopscube/xcl/blob/master/BSD_license.txt
 */

if (!defined('XOOPS_ROOT_PATH')) {
    exit();
}

class Legacy_HeaderScript
{
    protected $_mType = 'google';
    protected $_mCore = '1';
    protected $_mUi = '1';

    protected $_mLibrary = [];
    protected $_mScript = [];
    protected $_mMeta = ['keywords' =>'', 'description' =>'', 'robots' =>'', 'rating' =>'', 'author' =>'', 'copyright' =>'', 'msvalidate.01' =>'', 'google-site-verification' =>'', 'yandex-verification' =>'', 'fb:app_id' =>'', 'twitter:site' =>''];
    protected $_mOnloadScript = [];
    protected $_mStylesheet = [];
    protected $_mLink = [];

    public $mUsePrototype = false;    //use prototype.js ?
    public $mFuncNamePrefix = '';    //jQuery $() function's name prefix for compatibility with prototype.js

    /**
     * __construct
     *
     * @param	void
     *
     * @return	void
    **/
    public function __construct()
    {
        $root = XCube_Root::getSingleton();

        //setup jQuery library location
        $this->_mCore = $this->_getRenderConfig('jquery_core');
        $this->_mUi = $this->_getRenderConfig('jquery_ui');
        $core = str_replace('.', '', $this->_mCore);
        $this->_mType = is_numeric($core) ? 'google' : 'local';

        //use compatibility mode with prototype.js ?
        if (1 == $root->getSiteConfig('jQuery', 'usePrototype')) {
            $this->mUsePrototype = true;
            $this->mPrototypeUrl = $root->getSiteConfig('jQuery', 'prototypeUrl');
            $this->mFuncNamePrefix = $root->getSiteConfig('jQuery', 'funcNamePrefix');
        }

        $this->_setupDefaultStylesheet();
    }

    /**
     * _setupDefaultStylesheet
     *
     * @param	void
     *
     * @return	void
    **/
    public function _setupDefaultStylesheet()
    {
        if ($this->_getRenderConfig('css_file')) {
            $this->addStylesheet($this->_getRenderConfig('css_file'), false);
        }
    }

    /**
     * addLibrary
     *
     * @param	string $url
     * @param	bool $xoopsUrl
     *
     * @return	void
    **/
    public function addLibrary($url, $xoopsUrl=true)
    {
        $libUrl = (true == $xoopsUrl) ? XOOPS_URL . $url : $url;
        if (! in_array($libUrl, $this->_mLibrary)) {
            $this->_mLibrary[] = $libUrl;
        }
    }

    /**
     * addStylesheet
     *
     * @param	string $url
     * @param	bool $xoopsUrl
     *
     * @return	void
    **/
    public function addStylesheet($url, $xoopsUrl=true)
    {
        $libUrl = (true == $xoopsUrl) ? XOOPS_URL . $url : $url;
        if (! in_array($libUrl, $this->_mStylesheet)) {
            $this->_mStylesheet[] = $libUrl;
        }
    }

    /**
     * addScript
     *
     * @param	string $script
     * @param	bool $isOnloadFunction
     *
     * @return	void
    **/
    public function addScript($script, $isOnloadFunction=true)
    {
        if (true == $isOnloadFunction) {
            $this->_mOnloadScript[] = $script;
        } else {
            $this->_mScript[] = $script;
        }
    }

    /**
     * getLibraryArr
     *
     * @param	void
     *
     * @return	string[]
    **/
    public function getLibraryArr()
    {
        return $this->_mLibrary;
    }

    /**
     * getScriptArr
     *
     * @param	bool	$isOnloadFunction
     *
     * @return	string[]
    **/
    public function getScriptArr($isOnloadFunction=true)
    {
        if (true == $isOnloadFunction) {
            return $this->_mOnloadScript;
        } else {
            return $this->_mScript;
        }
    }

    /**
     * addLink
     *
     * @param	string	$rel
     * @param	string	$href
     * @param	string	$type
     * @param	string	$title
     *
     * @return	void
    **/
    public function addLink(/*** string ***/ $rel, /*** string ***/ $href, /*** string ***/ $type, /*** string ***/ $title=null)
    {
        $this->_mLink[] = ['rel' =>$rel, 'type' =>$type, 'title' =>$title, 'href' =>$href];
    }

    /**
     * addMeta
     *
     * @param	string	$name
     * @param	string	$content
     *
     * @return	void
    **/
    public function addMeta(/*** string ***/ $name, /*** string ***/ $content)
    {
        $this->_mMeta[$name] = $content;
    }

    /**
     * getMeta
     *
     * @param	string	$name
     *
     * @return	string
    **/
    public function getMeta(/*** string ***/ $name)
    {
        return $this->_mMeta[$name];
    }

    /**
     * createLibraryTag
     *
     * @param	void
     *
     * @return	string
    **/
    public function createLibraryTag()
    {
        $html = '';

        //prototype.js compatibility
        if ($this->mUsePrototype) {
            $html .= '<script type="text/javascript" src="'. $this->mPrototypeUrl .'"></script>';
        }

        //load main library
        if ('google' == $this->_mType) {
            $html .= $this->_loadGoogleJQueryLibrary();
        } elseif ('local' == $this->_mType) {
            $html .= $this->_loadLocalJQueryLibrary();
        }

        //load plugin libraries
        foreach ($this->_mLibrary as $lib) {
            $html .= '<script type="text/javascript" src="' . $lib . "\"></script>\n";
        }

        //load css
        foreach ($this->_mStylesheet as $css) {
            $html .= '<link type="text/css" rel="stylesheet" href="' . $css . "\">\n";
        }

        //load link
        foreach ($this->_mLink as $link) {
            $title = $link['title'] ? 'title="'.$link['title'].'" ' : null;
            $html .= sprintf("<link type=\"%s\" rel=\"%s\" href=\"%s\" $title>\n", $link['type'], $link['rel'], $link['href']);
        }

        //set rss auto-discovery
        if ($this->_getRenderConfig('feed_url')) {
            $html .= sprintf('<link rel="alternate" type="application/rss+xml" title="rss" href="%s" />'."\n", $this->_getRenderConfig('feed_url'));
        }
        return $html;
    }

    /**
     * _loadGoogleJQueryLibrary
     *
     * @param	void
     *
     * @return	string
    **/
    protected function _loadGoogleJQueryLibrary()
    {
        $apiKey = XCube_Root::getSingleton()->getSiteConfig('jQuery', 'GoogleApiKey');
        $apiKey = (isset($apiKey)) ? '?key='.$apiKey : null;
        return '<script type="text/javascript" src="//www.google.com/jsapi'.$apiKey.'" crossorigin="anonymous"></script>
<script type="text/javascript" crossorigin="anonymous"><!--
google.load("language", "1");
google.load("jquery", "'. $this->_mCore .'");
google.load("jqueryui", "'. $this->_mUi .'");
//-->
</script>
';
    }

    /**
     * _loadLocalJQueryLibrary
     *
     * @param	void
     *
     * @return	string
    **/
    protected function _loadLocalJQueryLibrary()
    {
        $html = '';
        if ($this->_mCore) {
            $html .= '<script type="text/javascript" src="'. $this->_mCore .'"></script>';
        }
        if ($this->_mUi) {
            $html .= '<script type="text/javascript" src="'. $this->_mUi .'"></script>';
        }

        return $html;
    }

    /**
     * createOnloadFunctionTag
     *
     * @param	void
     *
     * @return	string
    **/
    public function createOnloadFunctionTag()
    {
        $html = null;
        if (count($this->_mOnloadScript)>0||count($this->_mScript)>0) {
            $html = "<script type=\"text/javascript\" crossorigin=\"anonymous\"><!--\n";
            if ('google' == $this->_mType) {
                $html .= "google.setOnLoadCallback(function() {\n";
            }
            if (true == $this->mUsePrototype) {
                $html .= "jQuery.noConflict();\n";
            }
            $html .= "jQuery(function($){\n";
            $html .= $this->_makeScript(true);
            if ('google' == $this->_mType) {
                $html .= "\n});\n";
            }
            $html .= "\n});\n";
            $html .= $this->_makeScript(false);
            $html .= '//--></script>' . "\n";
        }
        return $html;
    }

    /**
     * _makeScript
     *
     * @param	bool	$isOnloadFunction
     *
     * @return	string
    **/
    protected function _makeScript($isOnloadFunction=true)
    {
        $html = null;
        $scriptArr = (true === $isOnloadFunction) ? $this->_mOnloadScript : $this->_mScript;
        foreach ($scriptArr as $script) {
            $html .= $this->_convertFuncName($script);
        }
        return $html;
    }

    /**
     * _convertFuncName
     *
     * @param	string $script
     *
     * @return	string
    **/
    protected function _convertFuncName($script)
    {
        if ($this->mFuncNamePrefix) {
            $script = str_replace('$(', $this->mFuncNamePrefix . '$(', $script);
        }
        return $script;
    }

    /**
     * _getRenderConfig
     *
     * @param	string $key
     *
     * @return	string
    **/
    protected function _getRenderConfig($key)
    {
        $handler =& xoops_gethandler('config');
        $configArr =& $handler->getConfigsByDirname('legacyRender');
        return $configArr[$key];
    }
}
